name: Build
concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true
on:
  pull_request:
    types: [ opened, reopened, synchronize ]
  push:
    branches: [ master ]

jobs:
  # This job runs multiple smaller checks where having several jobs would be overkill.
  misc_sanity_checks:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: Validate JSON files
      run: |
        python3 utils/validate_json.py data/txts/
        python3 utils/update_authors.py
    - name: Check for missing copyright headers
      run: |
        pushd src
        ../utils/find_missing_copyright_headers.sh
        popd
    - name: Check for superfluous includes and forward declarations
      run: |
        pushd src
        ../utils/find_unused_includes.py
        popd

  codecheck:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: Check for changed files
      uses: dorny/paths-filter@v2
      id: changed_files
      with:
        # groups to check for changed files
        filters: |
          codecheck:
            - 'CMakeLists.txt'
            - '*/CMakeLists.txt'
            - 'cmake/codecheck/**'
            - 'cmake/WlFunctions.cmake'
            - 'src/**'
    - name: Installing dependencies
      if: steps.changed_files.outputs.codecheck == 'true'
      run: sh ./.github/scripts/install_deps.sh
    - name: Test
      if: steps.changed_files.outputs.codecheck == 'true'
      run: |
        ./cmake/codecheck/run_tests.py
    - name: Check
      if: steps.changed_files.outputs.codecheck == 'true'
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE:STRING="Debug"
        TERM=dumb make -j1 codecheck 2>&1 | tee codecheck.out
    - name: Report
      if: steps.changed_files.outputs.codecheck == 'true'
      run: |
        if grep '^[/_.a-zA-Z]\+:[0-9]\+:' build/codecheck.out; then
          echo "You have codecheck warnings (see above). Please fix."
          exit 1
        else
          echo "Codecheck is clear :)"
          exit 0
        fi

  documentation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: Installing python
      uses: actions/setup-python@v4
      with:
        python-version: 3.x
    - name: Generate documentation
      run: |
        cd doc/sphinx
        pip install -r requirements.txt
        mkdir source/_static
        ./extract_rst.py
        sphinx-build -W -b json -d build/doctrees source build/json

  clang_tidy:
    runs-on: ubuntu-latest
    # Set job outputs to values from changed_files step for other jobs
    outputs:
      run_test_suite: ${{ steps.changed_files.outputs.test_suite }}
      create_installer: ${{ steps.changed_files.outputs.installer }}
      inst_windows_msvc: ${{ steps.changed_files.outputs.inst_windows_msvc }}
      inst_windows: ${{ steps.changed_files.outputs.inst_windows }}
      inst_macos: ${{ steps.changed_files.outputs.inst_macos }}
    env:
      CC:  /usr/bin/clang
      CXX: /usr/bin/clang++
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: Check for changed files
      uses: dorny/paths-filter@v2
      id: changed_files
      with:
        # groups to check for changed files (as string, yaml anchors are resolved by the tool)
        filters: |
          clang_tidy:
            - 'src/**'
            - 'utils/check_clang_tidy_results.py'
            - 'utils/run-clang-tidy.py'
          compile: &compile
            - 'CMakeLists.txt'
            - 'cmake/**'
            - 'src/**'
          test_suite:
            - *compile
            - 'data/**'
            - 'regression_test.py'
            - 'test/**'
            - '.github/workflows/build_testsuite.yaml'
          installer:
            - *compile
            - 'data/**'
            - 'doc/**'
            - 'po/**'
            # job appimage
            - 'xdg/org.widelands.Widelands.*'
          inst_windows_msvc:
            - 'utils/win32/**'
            - '.github/scripts/vcpkg_ref'
            - '.github/workflows/build_windows_msvc.yaml'
          inst_windows:
            - 'utils/win32/**'
            - '.github/workflows/build_windows.yaml'
          inst_macos:
            - 'utils/macos/*'
            - '.github/workflows/build_macos.yaml'
    - name: Clang-tidy steps
      if: steps.changed_files.outputs.clang_tidy == 'true'
      uses: ./.github/actions/build_clang_tidy.yml

  lua_style:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 1
    - name: Prepare documentation examples for parsing
      run: |
        pushd doc/sphinx
        ./extract_rst.py
        popd
    - name: Run Lua style checker
      run: ./utils/lua_style_checker.py

  testsuite:
    needs: [clang_tidy, documentation, codecheck, misc_sanity_checks, lua_style]
    if: needs.clang_tidy.outputs.run_test_suite == 'true'
    uses: ./.github/workflows/build_testsuite.yaml

  windows-msvc:
    needs: [clang_tidy, documentation, codecheck, misc_sanity_checks, lua_style]
    if: >
      needs.clang_tidy.outputs.create_installer == 'true' ||
      needs.clang_tidy.outputs.inst_windows_msvc == 'true'
    uses: ./.github/workflows/build_windows_msvc.yaml

  windows:
    needs: [clang_tidy, documentation, codecheck, misc_sanity_checks, lua_style]
    if: >
      needs.clang_tidy.outputs.create_installer == 'true' ||
      needs.clang_tidy.outputs.inst_windows == 'true'
    uses: ./.github/workflows/build_windows.yaml

  macos:
    needs: [clang_tidy, documentation, codecheck, misc_sanity_checks, lua_style]
    if: >
      needs.clang_tidy.outputs.create_installer == 'true' ||
      needs.clang_tidy.outputs.inst_macos == 'true'
    uses: ./.github/workflows/build_macos.yaml

  appimage:
    if: ${{ github.repository == 'widelands/widelands' && github.ref == 'refs/heads/master' && needs.clang_tidy.outputs.create_installer == 'true'}}
    needs: [clang_tidy, documentation, codecheck, misc_sanity_checks, lua_style]
    strategy:
      matrix:
        config: [Debug, Release]
        compiler: [clang-10]
    # Must run on the oldest still-supported Ubuntu LTS release
    runs-on: ubuntu-20.04
    env:
      VERSION: "${{ github.sha }}-${{ matrix.config }}-${{ matrix.compiler }}"
      CXX: '${{ matrix.compiler }}'
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Installing dependencies
      run: sh ./.github/scripts/install_deps.sh
    - name: Compile
      run: |
        if [ "${CXX:0:1}" == "c" ]
        then
          export CC="/usr/bin/${{ matrix.compiler }}"  # clang-10
          export CXX="${CC/clang/clang++}"             # clang++-10
        else
          export CXX="/usr/bin/${{ matrix.compiler }}" # g++-10
          export CC="${CXX/g++/gcc}"                   # gcc-10
        fi
        mkdir build
        pushd build
        cmake .. -DCMAKE_BUILD_TYPE:STRING="${{ matrix.config }}" -DOPTION_BUILD_WEBSITE_TOOLS="OFF" -DOPTION_BUILD_TESTS="OFF" -DOPTION_BUILD_CODECHECK="OFF" -DCMAKE_INSTALL_PREFIX=/usr/bin -DWL_INSTALL_BASEDIR=/usr/share/widelands -DWL_INSTALL_BINDIR=/usr/bin -DWL_INSTALL_DATADIR=../share/widelands
        make -k -j$(nproc) install DESTDIR=../AppDir
        popd
        mv AppDir/usr/bin/share/* AppDir/usr/share
        rmdir AppDir/usr/bin/share
    - name: Build AppImage
      run: |
        wget -nv -c https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy-x86_64.AppImage
        ./linuxdeploy-x86_64.AppImage --executable AppDir/usr/bin/widelands --desktop-file xdg/org.widelands.Widelands.desktop --appdir AppDir --output appimage
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: Widelands ${{ matrix.config }} ${{ matrix.compiler }} Linux AppImage
        path: ${{ github.workspace }}/Widelands-${{ env.VERSION }}-x86_64.AppImage

  # Dummy check for PRs that all required status checks have either passed or were skipped
  # (see https://github.com/actions/runner/issues/952 and https://github.com/orgs/community/discussions/9141)
  summary:
    name: CI Results Summary
    needs: [testsuite, windows, macos, appimage]  # We do not require MSVC due to frequent unrelated runner failures
    if: always() # to check if dependencies have failed or passed
    runs-on: "ubuntu-latest"
    steps:
    - name: Check for failed jobs
      if: >-
        contains(needs.*.result, 'failure') ||
        contains(needs.*.result, 'cancelled')
      run: |
        echo "A job failed or was cancelled!"
        exit 1
    - name: No step skipped  # Optional, just gives info
      if: "! contains(needs.*.result, 'skipped')"
      run: true

  dev_release:
    name: Automated development pre-release
    if: ${{ github.repository == 'widelands/widelands' && github.ref == 'refs/heads/master' && always() }}
    needs: [windows, windows-msvc, macos, appimage]
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 15
          token: '${{ secrets.WIDELANDS_FORMAT_TOKEN }}'
      - name: Download artifacts
        uses: actions/download-artifact@v3
      - name: Check missing artifacts
        # This step ensures that the development release always contains an artifact for every platform.
        # artifacts.list lists all attachments of the pre-release. In case a build step failed, we detect
        # that a file is missing and download the last successful build from the pre-release.
        run: |
          RELEASE_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/releases/download/latest"
          mkdir Widelands-latest
          cd Widelands-latest
          curl -L -O "$RELEASE_URL/artifacts.list"
          for ARTIFACT in $(cat artifacts.list)
          do
            [ "${ARTIFACT%%-*}" != "Widelands" ] && continue
            MATRIX=$(echo $ARTIFACT | sed 's/Widelands-[0-9a-f]*-//' -)
            ls ../Widelands*/Widelands*${MATRIX} || \
              curl -L -o $ARTIFACT "$RELEASE_URL/Widelands-daily-${MATRIX}"
          done
      - name: List and rename artifacts
        run: |
          sudo apt-get update
          sudo apt-get install rename
          find . -name 'Widelands-*' -type f -print0 | while IFS= read -d '' -r ARTIFACT; do
            FILENAME=$(basename "$ARTIFACT")
            # Move all artifacts to the current folder
            mv "$ARTIFACT" "$FILENAME"
            # Store original file names
            echo $FILENAME | tee -a artifacts.list
            # Rename artifacts to have a fixed url
            prename 's/Widelands-[0-9a-f]*-/Widelands-daily-/' "$FILENAME" \;
          done
          # Calculate checksums
          find . -name 'Widelands-daily-*' -type f -print0 | while IFS= read -d '' -r ARTIFACT; do
            echo "Calculate checksum for \"$ARTIFACT\""
            md5sum "${ARTIFACT}" > "${ARTIFACT}.md5"
          done
          # curl exits 23 because grep will kill it after the first match
          set +e
          latest=$(curl -i "https://api.github.com/repos/${GITHUB_REPOSITORY}/commits/master" | grep -m 1 "\"sha\": ")
          set -e
          latest=${latest#*: \"}
          latest=${latest%\",}
          if [ "$latest" != "$GITHUB_SHA" ]
          then
            echo "The master branch ($GITHUB_REF) was updated from '$GITHUB_SHA' to '$latest', cancel"
            exit 1
          fi
      - name: Updating latest pre-release
        # Creates a new pre-release with the "latest" tag and all gathered artifacts.
        # Because all older artifacts are removed, we have to reupload the missing ones detected in the previous step
        env:
          GH_TOKEN: "${{ secrets.WIDELANDS_FORMAT_TOKEN }}"
        run: |
          gh release delete latest --yes    || echo "No old release to delete"
          git push --delete origin latest   || echo "No latest tag to delete"
          git tag --force latest HEAD
          git push --tags origin

          echo "These builds are automatically generated from master. " >> release_notes
          echo "## Latest changes" >> release_notes
          # Print changelog from last 10 commits
          git log --pretty="- %h: %s (%an)" --no-decorate HEAD~10..HEAD >> release_notes
          echo "<details><summary>Original filenames</summary><pre>" >> release_notes
          cat artifacts.list >> release_notes
          echo "</pre></details>" >> release_notes

          gh release create latest         \
            --prerelease                   \
            --notes-file release_notes     \
            --title "Development Builds"   \
            Widelands-daily-* artifacts.list
